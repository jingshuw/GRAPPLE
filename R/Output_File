8c8
< #' @param exp.files A vector of length \code{k} of the GWAS summary statistics file names of the \code{k} risk factors for getting the effect sizes and standard deviations. Each GWAS file should have a column "SNP" for the SNP ids, "beta" for the effect sizes, "se" for the standard deviation, "effect_allele" for the effect allele and "other_allele" for the other allele of the SNP.
---
> #' @param exp.files A vector of length \code{k} of the GWAS summary statistics file names of the \code{k} risk factors for getting the effect sizes and standard deviations. Each GWAS file should have a column "SNP" for the SNP ids, "beta" for the effect sizes, "se" for the standard deviation, "effect_allele" for the effect allele and "other_allele" for the other allele of the SNP. 
10c10
< #' @param plink_refdat The reference genotype files (.bed, .bim, .fam) for clumping using PLINK (loaded with --bfile).
---
> #' @param plink_refdat The reference genotype files (.bed, .bim, .fam) for clumping using PLINK (loaded with --bfile). 
16,19c16,19
< #' @param marker.p.source source of p-values of mode markers, a string of either "exposure" or "selection". Default is "exposure" for obtaining more markers.
< #' @param clump_r2 The clumping r2 threshold in PLINK for genetic instrument selection. Default is set to 0.001 for selection of independent SNPs.
< #' @param clump_r2_formarkers The clumping r2 threshold in PLINK. Default is set to 0.05 for selection of candidates for the marker SNPs.
< #'
---
> #' @param marker.p.source source of p-values of mode markers, a string of either "exposure" or "selection". Default is "exposure" for obtaining more markers. 
> #' @param clump_r2 The clumping r2 threshold in PLINK for genetic instrument selection. Default is set to 0.001 for selection of independent SNPs. 
> #' @param clump_r2_formarkers The clumping r2 threshold in PLINK. Default is set to 0.05 for selection of candidates for the marker SNPs. 
> #' 
21,23c21,23
< #' \item{data}{A data frame of size \code{p * (3 + 2k + 2m + 1)} for the effect sizes of \code{p} number of selected independent SNPs (instruments) on \code{k} risk factors (exposures).
< #' The first three columns include the SNP rsID, the effect allele and other allele after harmonizing,
< #' the next \code{2k} columns are the estimated effect sizes and standard deviations for the \code{k} risk factors stored in \code{exp.files},
---
> #' \item{data}{A data frame of size \code{p * (3 + 2k + 2m + 1)} for the effect sizes of \code{p} number of selected independent SNPs (instruments) on \code{k} risk factors (exposures). 
> #' The first three columns include the SNP rsID, the effect allele and other allele after harmonizing, 
> #' the next \code{2k} columns are the estimated effect sizes and standard deviations for the \code{k} risk factors stored in \code{exp.files}, 
26c26
< #' \item{marker.data}{A data frame for marker candidate SNPs, which has the same columns as \code{data}}.
---
> #' \item{marker.data}{A data frame for marker candidate SNPs, which has the same columns as \code{data}}. 
28a29
> 
30d30
< #' @importFrom tools file_ext
34,130c34,169
<                      out.files,
<                      plink_refdat,
<                      max.p.thres = 0.01,
<                      cal.cor = T, p.thres.cor = 0.5,
<                      get.marker.candidates = T,
<                      marker.p.thres = 1e-5,
<                      marker.p.source = "exposure",
<                      clump_r2 = 0.001,
<                      clump_r2_formarkers = 0.05) {
<     if (length(exp.files) > 1) {
<         if (get.marker.candidates)
<             print("Marker candidates will not be obtained as number of risk factors k > 1")
<         get.marker.candidates <- F
<     }
< 
<     if (missing(plink_refdat))
<         stop("Missing PLINK reference files.")
< 
< 
<     sel.SNPs <- NULL
<     pvals <- NULL
<     Sel.SNPs.cor <- c()
<     k <- length(exp.files)
<     for (file in sel.files) {
<         print(paste("loading data for selection:", file, "..."))
<         file.type <- file_ext(file)
<         if (file.type == "rda" || file.type == ".rData")
<             load(file)
<         else
<             dat <- data.frame(fread(file))
<         sel.snps <- as.character(dat$SNP[dat$pval < max.p.thres])
< 
<         ## keep SNPs with large p-values if we need to calculate the correlation of summary statistics for overlapping cohorts
<         if (cal.cor) {
<             sel.snps.cor <- dat$SNP[dat$pval > p.thres.cor]
<         }
< 
<         pvals.tmp <- dat$pval[dat$pval < max.p.thres]
<         names(pvals.tmp) <- make.names(sel.snps, unique = T)
< 
<         if (is.null(sel.SNPs)) {
<             sel.SNPs <- sel.snps
<             if (cal.cor)
<                 sel.SNPs.cor <- sel.snps.cor
< 
<             pvals <- pvals.tmp
<         } else {
<             ori.snps <- sel.SNPs
<             sel.SNPs <- union(sel.SNPs, sel.snps)
<             temp <- rep(1, length(sel.SNPs))
<             names(temp) <- sel.SNPs
<             temp[ori.snps] <- pvals
<             temp1 <- rep(1, length(sel.SNPs))
<             names(temp1) <- sel.SNPs
<             temp1[sel.snps] <- pvals.tmp
<             ## when k > 1, take the minium of k risk factors' p-value as selection p-value
<             pvals <- pmin(temp, temp1)
<             names(pvals) <- sel.SNPs
<             rm(temp, temp1)
< 
<             if (cal.cor)
<                 sel.SNPs.cor <- intersect(sel.SNPs.cor, sel.snps.cor)
<         }
< 
<     }
< 
<     ## Bonferroni correction on the selected p-values when there are more than one risk factor
<     pvals <- pvals * length(sel.files)
< 
<     beta_exp <- NULL
<     se_exp <- NULL
<     ref.data.exp <- NULL
<     marker.SNPs <- NULL
<     marker.pvals <- NULL
<     for (exp.file in exp.files) {
<         print(paste("loading data from exposure:", exp.file, "..."))
< 
<         file.type <- file_ext(file)
<         if (file.type == "rda" || file.type == ".rData")
<             load(exp.file)
<         else
<             dat <- data.frame(fread(exp.file))
< 
<         sel.SNPs <- intersect(sel.SNPs, dat$SNP)
<         if (cal.cor)
<             sel.SNPs.cor <- intersect(sel.SNPs.cor, dat$SNP)
< 
< 
<         if (get.marker.candidates && marker.p.source == "exposure") {
<             marker.SNPs <- dat$SNP[dat$pval < marker.p.thres]
<             marker.pvals <- dat$pval[dat$pval < marker.p.thres]
<             names(marker.pvals) <- make.names(marker.SNPs, unique = T)
<         } else {
<             marker.SNPs <- c()
<         }
<         dat <- dat[dat$SNP %in% c(union(sel.SNPs, marker.SNPs),
<                                   sel.SNPs.cor), ]
---
>                      out.files, 
>                      plink_refdat, 
>                      max.p.thres = 0.01, 
> 					           cal.cor = T, p.thres.cor = 0.5, 
> 					           get.marker.candidates = T,
> 					           marker.p.thres = 1e-5,
> 					           marker.p.source = "exposure",
>                      clump_r2 = 0.001, 
> 					           clump_r2_formarkers = 0.05) {
> 	if (length(exp.files) > 1) {
> 		if (get.marker.candidates)
> 			print("Marker candidates will not be obtained as number of risk factors k > 1")
> 		get.marker.candidates <- F
> 	}
> 
> 	if (missing(plink_refdat))
> 		stop("Missing PLINK reference files.")
> 
> 	
> 	sel.SNPs <- NULL
> 	pvals <- NULL
> 	sel.SNPs.cor <- c()
> 	k <- length(exp.files)
> 	for (file in sel.files) {
> 		print(paste("loading data for selection:", file, "..."))
> 		file.type <- strsplit(file, "[.]")[[1]][2]
> 		if (file.type == "rda" || file.type == ".rData")
> 			load(file)
> 		else 
> 			dat <- data.frame(fread(file))
> 		sel.snps <- dat$SNP[dat$pval < max.p.thres]
> 
> 		## keep SNPs with large p-values if we need to calculate the correlation of summary statistics for overlapping cohorts
> 		if (cal.cor) {
> 			sel.snps.cor <- dat$SNP[dat$pval > p.thres.cor]
> 		}
> 
> 		pvals.tmp <- dat$pval[dat$pval < max.p.thres]
> 		names(pvals.tmp) <- make.names(sel.snps, unique = T)
> 
> 		if (is.null(sel.SNPs)) {
> 			sel.SNPs <- sel.snps
> 			if (cal.cor)
> 				sel.SNPs.cor <- sel.snps.cor
> 			
> 			pvals <- pvals.tmp
> 		} else {
> 			ori.snps <- sel.SNPs
> 			sel.SNPs <- union(sel.SNPs, sel.snps)
> 			temp <- rep(1, length(sel.SNPs))
> 			names(temp) <- sel.SNPs
> 			temp[ori.snps] <- pvals
> 			temp1 <- rep(1, length(sel.SNPs))
> 			names(temp1) <- sel.SNPs
> 			temp1[sel.snps] <- pvals.tmp
> 			## when k > 1, take the minium of k risk factors' p-value as selection p-value
> 			pvals <- pmin(temp, temp1)
> 			names(pvals) <- sel.SNPs
> 			rm(temp, temp1)
> 
> 			if (cal.cor)
> 				sel.SNPs.cor <- intersect(sel.SNPs.cor, sel.snps.cor)
> 		}
> 	}
> 
>   ## Bonferroni correction on the selected p-values when there are more than one risk factor
> 	pvals <- pvals * length(sel.files)
> 
> 
> 	beta_exp <- NULL
> 	se_exp <- NULL
> 	ref.data.exp <- NULL
> 	marker.SNPs <- NULL
> 	marker.pvals <- NULL
> 	for (exp.file in exp.files) {
> 		print(paste("loading data from exposure:", exp.file, "..."))
> 
> 		file.type <- strsplit(exp.file, "[.]")[[1]][2]
> 		if (file.type == "rda" || file.type == ".rData")
> 			load(exp.file)
> 		else 
> 			dat <- data.frame(fread(exp.file))
> 
> 		sel.SNPs <- intersect(sel.SNPs, dat$SNP)
> 		if (cal.cor)
> 			sel.SNPs.cor <- intersect(sel.SNPs.cor, dat$SNP)
> 
> 
> 		if (get.marker.candidates && marker.p.source == "exposure") {
> 			marker.SNPs <- dat$SNP[dat$pval < marker.p.thres]
> 			marker.pvals <- dat$pval[dat$pval < marker.p.thres]
> 			names(marker.pvals) <- make.names(marker.SNPs, unique = T)
> 		} else {
> 			marker.SNPs <- c()
> 		}
> 		dat <- dat[dat$SNP %in% c(union(sel.SNPs, marker.SNPs), 
> 								   sel.SNPs.cor), ]
> 
> 
>     ## harmonize one dataset by one dataset
> 		if (!is.null(ref.data.exp)) {
> 			dat <- formatData(dat, "outcome")
> 			ref.data.exp <- suppressMessages(harmonise_data(ref.data.exp, dat))
> 			ref.data.exp <- ref.data.exp[ref.data.exp$mr_keep, ]
> 	    	ref.data.exp$SNP <- as.character(ref.data.exp$SNP)
> 			dat <- ref.data.exp[, c(1, grep(".outcome", colnames(ref.data.exp)))]
> 			colnames(dat) <- gsub(".outcome", "", colnames(dat))
> 			ref.data.exp <- ref.data.exp[, c(1, grep(".exposure", colnames(ref.data.exp)))]
> 			SNPs.kept <- unique(ref.data.exp$SNP)
> 			beta_exp <- beta_exp[SNPs.kept, , drop = F]
> 			se_exp <- se_exp[SNPs.kept, , drop = F]
> 			rownames(ref.data.exp) <- make.names(ref.data.exp$SNP, unique = T)
> 			ref.data.exp <- ref.data.exp[SNPs.kept, , drop = F]
> 			rownames(dat) <- make.names(dat$SNP, unique = T)
> 			dat <- dat[SNPs.kept, , drop = F]
> 			flip <- rep(1, nrow(beta_exp))
> 			flip[sign(beta_exp[, 1]) != sign(ref.data.exp$beta.exposure)] <- -1
> 			beta_exp <- flip * beta_exp
> 			sel.SNPs <- intersect(sel.SNPs, SNPs.kept)
> 			if (cal.cor)
> 				sel.SNPs.cor <- intersect(sel.SNPs.cor, SNPs.kept)
> 		} else {
> 			ref.data.exp <- formatData(dat, "exposure")
> 			rownames(ref.data.exp) <- make.names(ref.data.exp$SNP, unique = T)
> 		}
> 
> 		if (is.null(beta_exp)) {
> 			beta_exp <- data.frame(dat$beta)
> 			rownames(beta_exp) <- make.names(dat$SNP, unique = T)
> 			se_exp <- data.frame(dat$se)
> 			rownames(se_exp) <- make.names(dat$SNP, unique = T)
> 		} else {
> 			beta_exp <- cbind(beta_exp, dat$beta)
> 			se_exp <- cbind(se_exp, dat$se)
> 		}
> 	}
133,172c172
<         ## harmonize one dataset by one dataset
<         if (!is.null(ref.data.exp)) {
<             dat <- formatData(dat, "outcome")
<             ref.data.exp <- suppressMessages(harmonise_data(ref.data.exp, dat))
<             ref.data.exp <- ref.data.exp[ref.data.exp$mr_keep, ]
<             ref.data.exp$SNP <- as.character(ref.data.exp$SNP)
<             dat <- ref.data.exp[, c(1, grep(".outcome", colnames(ref.data.exp)))]
<             colnames(dat) <- gsub(".outcome", "", colnames(dat))
<             ref.data.exp <- ref.data.exp[, c(1, grep(".exposure", colnames(ref.data.exp)))]
<             SNPs.kept <- unique(ref.data.exp$SNP)
<             beta_exp <- beta_exp[SNPs.kept, , drop = F]
<             se_exp <- se_exp[SNPs.kept, , drop = F]
<             rownames(ref.data.exp) <- make.names(ref.data.exp$SNP, unique = T)
<             ref.data.exp <- ref.data.exp[SNPs.kept, , drop = F]
<             rownames(dat) <- make.names(dat$SNP, unique = T)
<             dat <- dat[SNPs.kept, , drop = F]
<             flip <- rep(1, nrow(beta_exp))
<             flip[sign(beta_exp[, 1]) != sign(ref.data.exp$beta.exposure)] <- -1
<             beta_exp <- flip * beta_exp
<             sel.SNPs <- intersect(sel.SNPs, SNPs.kept)
<             if (cal.cor)
<                 sel.SNPs.cor <- intersect(sel.SNPs.cor, SNPs.kept)
<         } else {
<             ref.data.exp <- formatData(dat, "exposure")
<             rownames(ref.data.exp) <- make.names(ref.data.exp$SNP, unique = T)
<         }
< 
<         if (is.null(beta_exp)) {
<             beta_exp <- data.frame(dat$beta)
<             rownames(beta_exp) <- make.names(dat$SNP, unique = T)
<             se_exp <- data.frame(dat$se)
<             rownames(se_exp) <- make.names(dat$SNP, unique = T)
<         } else {
<             beta_exp <- cbind(beta_exp, dat$beta)
<             se_exp <- cbind(se_exp, dat$se)
<         }
<     }
< 
< 
<     ## load disease (outcome) file
---
> 	## load disease (outcome) file
178c178
<         file.type <- file_ext(file)
---
>         file.type <- strsplit(out.file, "[.]")[[1]][2]
182c182
<             dat <- data.frame(fread(out.file))
---
>             dat <- data.frame(fread(out.file))                                                         
184,185c184,185
<         dat <- dat[dat$SNP %in% c(union(sel.SNPs, marker.SNPs),
<                                   sel.SNPs.cor), ]
---
>         dat <- dat[dat$SNP %in% c(union(sel.SNPs, marker.SNPs), 
>                                    sel.SNPs.cor), ]
189,214c189,214
<         dat <- formatData(dat, "outcome")
<         ref.data.exp <- suppressMessages(harmonise_data(ref.data.exp, dat))
<         ref.data.exp <- ref.data.exp[ref.data.exp$mr_keep, ]
<         ref.data.exp$SNP <- as.character(ref.data.exp$SNP)
<         dat <- ref.data.exp[, c(1, grep(".outcome", colnames(ref.data.exp)))]
<         colnames(dat) <- gsub(".outcome", "", colnames(dat))
<         ref.data.exp <- ref.data.exp[, c(1, grep(".exposure", colnames(ref.data.exp)))]
<         SNPs.kept <- unique(ref.data.exp$SNP)
<         beta_exp <- beta_exp[SNPs.kept, , drop = F]
<         se_exp <- se_exp[SNPs.kept, , drop = F]
<         rownames(ref.data.exp) <- make.names(ref.data.exp$SNP, unique = T)
<         ref.data.exp <- ref.data.exp[SNPs.kept, , drop = F]
<         rownames(dat) <- make.names(dat$SNP, unique = T)
<         dat <- dat[SNPs.kept, , drop = F]
<         flip <- rep(1, nrow(beta_exp))
<         flip[sign(beta_exp[, 1]) != sign(ref.data.exp$beta.exposure)] <- -1
<                                         #    print(sum(flip == -1))
<         beta_exp <- flip * beta_exp
< 
<         sel.SNPs <- intersect(sel.SNPs, SNPs.kept)
< 
<         if (cal.cor)
<             sel.SNPs.cor <- intersect(sel.SNPs.cor, SNPs.kept)
<         if (get.marker.candidates) {
<             marker.SNPs <- intersect(marker.SNPs, SNPs.kept)
<         }
---
>     		dat <- formatData(dat, "outcome")
>     		ref.data.exp <- suppressMessages(harmonise_data(ref.data.exp, dat))
>     		ref.data.exp <- ref.data.exp[ref.data.exp$mr_keep, ]
>     		ref.data.exp$SNP <- as.character(ref.data.exp$SNP)
>     		dat <- ref.data.exp[, c(1, grep(".outcome", colnames(ref.data.exp)))]
>     		colnames(dat) <- gsub(".outcome", "", colnames(dat))
>     		ref.data.exp <- ref.data.exp[, c(1, grep(".exposure", colnames(ref.data.exp)))]
>     		SNPs.kept <- unique(ref.data.exp$SNP)
>     		beta_exp <- beta_exp[SNPs.kept, , drop = F]
>     		se_exp <- se_exp[SNPs.kept, , drop = F]
>     		rownames(ref.data.exp) <- make.names(ref.data.exp$SNP, unique = T)
>     		ref.data.exp <- ref.data.exp[SNPs.kept, , drop = F]
>     		rownames(dat) <- make.names(dat$SNP, unique = T)                                           
>     		dat <- dat[SNPs.kept, , drop = F]
>     		flip <- rep(1, nrow(beta_exp))
>     		flip[sign(beta_exp[, 1]) != sign(ref.data.exp$beta.exposure)] <- -1
>     		#    print(sum(flip == -1))
>     		beta_exp <- flip * beta_exp
>     
>     		sel.SNPs <- intersect(sel.SNPs, SNPs.kept)
>     		
>     		if (cal.cor)
>     			sel.SNPs.cor <- intersect(sel.SNPs.cor, SNPs.kept)
>     		if (get.marker.candidates) {
>     			marker.SNPs <- intersect(marker.SNPs, SNPs.kept)
> 		}
223,224c223,224
<             beta_out <- beta_out[SNPs.kept, , drop = F]
<             se_out <- se_out[SNPs.kept, , drop = F]
---
>       			beta_out <- beta_out[SNPs.kept, , drop = F]
>       			se_out <- se_out[SNPs.kept, , drop = F]
230,281c230,310
<     pvals <- pvals[sel.SNPs]
<     if (get.marker.candidates) {
<         if (marker.p.source == "exposure")
<             marker.pvals <- marker.pvals[marker.SNPs]
<         else {
<             marker.SNPs <- sel.SNPs[pvals < marker.p.thres]
<             marker.pvals <- pvals[pvals < marker.p.thres]
<         }
<     }
< 
<     dat <- dat[dat$SNP %in% c(sel.SNPs, marker.SNPs), , drop = F]
< 
< 
<     if (cal.cor) {
<         zz <- cbind(beta_exp, se_exp, beta_out, se_out)[sel.SNPs.cor,]
<         z.values <- cbind(beta_exp[sel.SNPs.cor, ]/se_exp[sel.SNPs.cor, ],
<                           beta_out[sel.SNPs.cor, ]/se_out[sel.SNPs.cor, ])
<         colnames(z.values) <- c(paste0("exposure", 1:length(exp.files)),
<                                 paste0("outcome", 1:length(out.files)))
< 
<         z.values <- as.matrix(z.values)
<         z.values <- z.values[rowSums(is.na(z.values)) == 0,  , drop = F]
<         covv <- t(z.values) %*% z.values / nrow(z.values)
<         varr <- colMeans(z.values^2, na.rm = T)
<         corr <- t(covv / sqrt(varr))/sqrt(varr)
<     } else
<         corr <- NULL
< 
< 
<     data.sel <- data.frame(SNP = sel.SNPs, pval = pvals)
< 
<     print("Start clumping using PLINK ...")
<     print(head(data.sel))
<     data.sel <- plink_clump(data.sel, "plink",
<                             plink_refdat, clump_r2 = clump_r2)
<     sel.SNPs <- as.character(data.sel$SNP)
< 
< 
<     if (get.marker.candidates) {
<         data.sel <- data.frame(SNP = marker.SNPs, pval = marker.pvals)
<         data.sel <- plink_clump(data.sel, "plink",
<                                 plink_refdat,
<                                 clump_r2 = clump_r2_formarkers)
<         marker.SNPs <- as.character(data.sel$SNP)
<     }
<     print("check1")
< 
<     colnames(beta_exp) <- paste0("gamma_exp", 1:length(exp.files))
<     colnames(se_exp) <-  paste0("se_exp", 1:length(exp.files))
< 
<     colnames(beta_out) <- paste0("gamma_out", 1:length(out.files))
<     colnames(se_out) <-  paste0("se_out", 1:length(out.files))
---
> 	pvals <- pvals[sel.SNPs]
> 	if (get.marker.candidates) {
> 		if (marker.p.source == "exposure")
> 			marker.pvals <- marker.pvals[marker.SNPs]
> 		else {
> 			marker.SNPs <- sel.SNPs[pvals < marker.p.thres]
> 			marker.pvals <- pvals[pvals < marker.p.thres]
> 		}
> 	}
> 
> 	dat <- dat[dat$SNP %in% c(sel.SNPs, marker.SNPs), , drop = F]
> 
> 
> 	if (cal.cor) {
> 		zz <- cbind(beta_exp, se_exp, beta_out, se_out)[sel.SNPs.cor,]
> 		z.values <- cbind(beta_exp[sel.SNPs.cor, ]/se_exp[sel.SNPs.cor, ],
> 						  beta_out[sel.SNPs.cor, ]/se_out[sel.SNPs.cor, ])
> 		colnames(z.values) <- c(paste0("exposure", 1:length(exp.files)), 
> 								paste0("outcome", 1:length(out.files)))
> 
> 		z.values <- as.matrix(z.values)
> 		z.values <- z.values[rowSums(is.na(z.values)) == 0,  , drop = F]
> 		covv <- t(z.values) %*% z.values / nrow(z.values)
> 		varr <- colMeans(z.values^2, na.rm = T)
> 		corr <- t(covv / sqrt(varr))/sqrt(varr)
> 	} else
> 		corr <- NULL
> 
> 
> 	data.sel <- data.frame(SNP = sel.SNPs, pval = pvals)
>  	
> 	print("Start clumping using PLINK ...")
> 	data.sel <- plink_clump(data.sel, "plink", 
> 							plink_refdat, clump_r2 = clump_r2)
> 	sel.SNPs <- as.character(data.sel$SNP)
> 	
> 
> 	if (get.marker.candidates) {
> 		data.sel <- data.frame(SNP = marker.SNPs, pval = marker.pvals)
> 		data.sel <- plink_clump(data.sel, "plink", 
> 								plink_refdat, 
> 								clump_r2 = clump_r2_formarkers)
> 		marker.SNPs <- as.character(data.sel$SNP)
> 	}
> 
> 
> 	colnames(beta_exp) <- paste0("gamma_exp", 1:length(exp.files))
> 	colnames(se_exp) <-  paste0("se_exp", 1:length(exp.files))
> 
> 	colnames(beta_out) <- paste0("gamma_out", 1:length(out.files))
> 	colnames(se_out) <-  paste0("se_out", 1:length(out.files))
> 	
> 
> 
> 	
> 	beta_exp.marker <- beta_exp[as.character(marker.SNPs), , drop = F]
> 	se_exp.marker <- se_exp[as.character(marker.SNPs), , drop = F]
> 	beta_out.marker <- beta_out[as.character(marker.SNPs), , drop = F]
> 	se_out.marker <- se_out[as.character(marker.SNPs), , drop = F]
> 	meta_data.marker <- dat[as.character(marker.SNPs), c("SNP", "effect_allele", 
> 															  "other_allele")]
> 
> 	beta_exp <- beta_exp[as.character(sel.SNPs), , drop = F]
> 	se_exp <- se_exp[as.character(sel.SNPs), , drop = F]
> 	beta_out <- beta_out[as.character(sel.SNPs), , drop = F]
> 	se_out <- se_out[as.character(sel.SNPs), , drop = F]
> 	meta_data <- dat[as.character(sel.SNPs), c("SNP", "effect_allele", 
> 													"other_allele")]
> 
> 	print(paste(nrow(beta_exp), "independent genetic instruments extracted. Done!"))
> 
> 	pvals <- pvals[sel.SNPs]
> 	names(pvals) <- sel.SNPs
> 
> 
> 	marker.pvals <- marker.pvals[marker.SNPs]
> 	names(marker.pvals) <- marker.SNPs
> 
> 	data <- cbind(meta_data, beta_exp, se_exp, beta_out, se_out, selection_pvals = pvals)
> 	marker.data <- cbind(meta_data.marker, beta_exp.marker, se_exp.marker,
> 						 beta_out.marker, se_out.marker, selection_pvals = marker.pvals)
283d311
<     print("check2")
284a313
> 	gc(full = F)
286,304c315,317
<     beta_exp.marker <- beta_exp[as.character(marker.SNPs), , drop = F]
<     se_exp.marker <- se_exp[as.character(marker.SNPs), , drop = F]
<     beta_out.marker <- beta_out[as.character(marker.SNPs), , drop = F]
<     se_out.marker <- se_out[as.character(marker.SNPs), , drop = F]
<     meta_data.marker <- dat[as.character(marker.SNPs), c("SNP", "effect_allele",
<                                                          "other_allele")]
< 
<     beta_exp <- beta_exp[as.character(sel.SNPs), , drop = F]
<     se_exp <- se_exp[as.character(sel.SNPs), , drop = F]
<     beta_out <- beta_out[as.character(sel.SNPs), , drop = F]
<     se_out <- se_out[as.character(sel.SNPs), , drop = F]
<     meta_data <- dat[as.character(sel.SNPs), c("SNP", "effect_allele",
<                                                "other_allele")]
< 
<     print(paste(nrow(beta_exp), "independent genetic instruments extracted. Done!"))
< 
<     pvals <- pvals[sel.SNPs]
<     names(pvals) <- sel.SNPs
< 
---
> 	return(list(data = data, marker.data = marker.data,
> 				cor.mat = corr))
> }
306,307d318
<     marker.pvals <- marker.pvals[marker.SNPs]
<     names(marker.pvals) <- marker.SNPs
309,311d319
<     data <- cbind(meta_data, beta_exp, se_exp, beta_out, se_out, selection_pvals = pvals)
<     marker.data <- cbind(meta_data.marker, beta_exp.marker, se_exp.marker,
<                          beta_out.marker, se_out.marker, selection_pvals = marker.pvals)
314d321
<     gc(full = F)
316,318d322
<     return(list(data = data, marker.data = marker.data,
<                 cor.mat = corr))
< }
